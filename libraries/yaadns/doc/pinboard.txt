#
#  (COPYRIGHT) Copyright (C) 2008, 2009, The ONS Team.
#  This file is part of ONS, see COPYING for details.
#

#
# File information:
# - Created: 9. April 2008
# - Lead-Dev: - David Herrmann
# - Contributors: /
# - Last-Change: 27. December 2008
#

MISC:
- searchlist
- case insensitive
- unlimited TTL
- dns poison (http://cr.yp.to/djbdns/notes.html)

RFC 1034:
- If a CNAME RR is present at a node, no other data should be
  present; this ensures that the data for a canonical name and its aliases
  cannot be different.  This rule also insures that a cached CNAME can be
  used without checking with an authoritative server for other RR types.
- Of course, by the robustness
  principle, domain software should not fail when presented with CNAME
  chains or loops; CNAME chains should be followed and CNAME loops
  signalled as an error.
- The most important field in the header is a four bit field called an
  opcode which separates different queries.  Of the possible 16 values,
  one (standard query) is part of the official protocol, two (inverse
  query and status query) are options, one (completion) is obsolete, and
  the rest are unassigned.
- The four sections are:
  Question        Carries the query name and other query parameters.
  Answer          Carries RRs which directly answer the query.
  Authority       Carries RRs which describe other authoritative servers.
                  May optionally carry the SOA RR for the authoritative
                  data in the answer section.
  Additional      Carries RRs which may be helpful in using the RRs in the
                  other sections.
- Note that the QCLASS=* construct requires special interpretation
  regarding authority.  Since a particular name server may not know all of
  the classes available in the domain system, it can never know if it is
  authoritative for all classes.  Hence responses to QCLASS=* queries can
  never be authoritative.
- Therefore, the RRs returned in inverse
  queries should never be cached.
- Inverse queries are NOT an acceptable method for mapping host addresses
  to host names; use the IN-ADDR.ARPA domain instead.
- The RRs that describe cuts around the bottom of the zone are NS RRs that
  name the servers for the subzones.  Since the cuts are between nodes,
  these RRs are NOT part of the authoritative data of the zone, and should
  be exactly the same as the corresponding RRs in the top node of the
  subzone.
- Since name servers are always associated with zone boundaries,
  NS RRs are only found at nodes which are the top node of some zone. In
  the data that makes up a zone, NS RRs are found at the top node of the
  zone (and are authoritative) and at cuts around the bottom of the zone
  (where they are not authoritative), but never in between.
- One of the goals of the zone structure is that any zone have all the
  data required to set up communications with the name servers for any
  subzones.
- To fix this problem, a zone contains "glue" RRs which are not
  part of the authoritative data, and are address RRs for the servers.
  These RRs are only necessary if the name server's name is "below" the
  cut, and are only used as part of a referral response.
- The simplest mode for the server is non-recursive, since it
  can answer queries using only local information: the response
  contains an error, the answer, or a referral to some other
  server "closer" to the answer.  All name servers must
  implement non-recursive queries.
- The simplest mode for the client is recursive, since in this
  mode the name server acts in the role of a resolver and
  returns either an error or the answer, but never referrals.
  This service is optional in a name server, and the name server
  may also choose to restrict the clients which can use
  recursive mode.
- The recursion available, or RA bit, is set or cleared by a
  name server in all responses.  The bit is true if the name
  server is willing to provide recursive service for the client,
  regardless of whether the client requested recursive service.
  That is, RA signals availability rather than use.
- Queries contain a bit called recursion desired or RD.  This
  bit specifies specifies whether the requester wants recursive
  service for this query.  Clients may request recursive service
  from any name server, though they should depend upon receiving
  it only from servers which have previously sent an RA, or
  servers which have agreed to provide service through private
  agreement or some other means outside of the DNS protocol.
- The recursive mode occurs when a query with RD set arrives at a server
  which is willing to provide recursive service; the client can verify
  that recursive mode was used by checking that both RA and RD are set in
  the reply.  Note that the name server should never perform recursive
  service unless asked via RD, since this interferes with trouble shooting
  of name servers and their databases.
- A * label appearing in a query name has no special effect, but can be
  used to test for wildcards in an authoritative zone; such a query is the
  only way to get a response containing RRs with an owner name with * in
  it.  The result of such a query should not be cached.
- Negative response caching
  The method is that a name server may add an SOA RR to the additional
  section of a response when that response is authoritative.  The SOA must
  be that of the zone which was the source of the authoritative data in
  the answer section, or name error if applicable.  The MINIMUM field of
  the SOA controls the length of time that the negative result may be
  cached.
- A very important goal of the resolver is to eliminate network delay and
  name server load from most requests by answering them from its cache of
  prior results.  It follows that caches which are shared by multiple
  processes, users, machines, etc., are more efficient than non-shared
  caches.
- Domain names in RRs which point at another name should always point at
  the primary name and not the alias.  This avoids extra indirections in
  accessing information.


RFC 1035:
- Although labels can contain any 8 bit values in octets that make up a
  label, it is strongly recommended that labels follow the preferred
  syntax described elsewhere in this memo, which is compatible with
  existing host naming conventions.  Name servers and resolvers must
  compare labels in a case-insensitive manner (i.e., A=a), assuming ASCII
  with zero parity.  Non-alphabetic codes must match exactly.
- Master files are text files that contain RRs in text form.  Since the
  contents of a zone can be expressed in the form of a list of RRs a
  master file is most often used to define a zone, though it can be used
  to list a cache's contents.
- A name server must employ multiple concurrent activities, whether they
  are implemented as separate tasks in the host's OS or multiplexing
  inside a single name server program.  It is simply not acceptable for a
  name server to block the service of UDP requests while it waits for TCP
  data for refreshing or query activities.  Similarly, a name server
  should not attempt to provide recursive service without processing such
  requests in parallel, though it may choose to serialize requests from a
  single client, or to regard identical requests from the same client as
  duplicates.  A name server should not substantially delay requests while
  it reloads a zone from master files or while it incorporates a newly
  refreshed zone into its database.
- One way to solve the case problem is to store the labels for each node
  in two pieces: a standardized-case representation of the label where all
  ASCII characters are in a single case, together with a bit mask that
  denotes which characters are actually of a different case.
- If QCLASS=* is used, then authoritative answers
  won't be available.
- Note that this
  information should be kept on a per address basis, rather than on a per
  name server basis, because the response time and batting average of a
  particular server may vary considerably from address to address.  Note
  also that this information is actually specific to a resolver address /
  server address pair, so a resolver with multiple addresses may wish to
  keep separate histories for each of its addresses.
- When several RRs of the same type are available for a
  particular owner name, the resolver should either cache them
  all or none at all.  When a response is truncated, and a
  resolver doesn't know whether it has a complete set, it should
  not cache a possibly partial set of RRs.
















###############################
## Short Summary of RFC 1035 ##
###############################

A MESSAGE
    +---------------------+
    |        Header       | the header of the message
    +---------------------+
    |       Question      | the question for the name server
    +---------------------+
    |        Answer       | RRs answering the question
    +---------------------+
    |      Authority      | RRs pointing toward an authority
    +---------------------+
    |      Additional     | RRs holding additional information
    +---------------------+
The header section is always present.  The header includes fields that
specify which of the remaining sections are present, and also specify
whether the message is a query or a response, a standard query or some
other opcode, etc.

The names of the sections after the header are derived from their use in
standard queries.  The question section contains fields that describe a
question to a name server.  These fields are a query type (QTYPE), a
query class (QCLASS), and a query domain name (QNAME).  The last three
sections have the same format: a possibly empty list of concatenated
resource records (RRs).  The answer section contains RRs that answer the
question; the authority section contains RRs that point toward an
authoritative name server; the additional records section contains RRs
which relate to the query, but are not strictly answers for the
question.



A HEADER
                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      ID                       |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    QDCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ANCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    NSCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ARCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

ID A 16 bit identifier assigned by the program that
                generates any kind of query.  This identifier is copied
                the corresponding reply and can be used by the requester
                to match up replies to outstanding queries.
QR A one bit field that specifies whether this message is a
                query (0), or a response (1).
OPCODE A four bit field that specifies kind of query in this
                message.  This value is set by the originator of a query
                and copied into the response.  The values are:
                0               a standard query (QUERY)
                1               an inverse query (IQUERY)
                2               a server status request (STATUS)
                3-15            reserved for future use
AA Authoritative Answer - this bit is valid in responses,
                and specifies that the responding name server is an
                authority for the domain name in question section.
                Note that the contents of the answer section may have
                multiple owner names because of aliases.  The AA bit
                corresponds to the name which matches the query name, or
                the first owner name in the answer section.
TC TrunCation - specifies that this message was truncated
                due to length greater than that permitted on the
                transmission channel.
RD Recursion Desired - this bit may be set in a query and
                is copied into the response.  If RD is set, it directs
                the name server to pursue the query recursively.
                Recursive query support is optional.
RA Recursion Available - this be is set or cleared in a
                response, and denotes whether recursive query support is
                available in the name server.
Z Reserved for future use. Must be zero in all queries
                and responses.
RCODE Response code - this 4 bit field is set as part of
                responses.  The values have the following
                interpretation:
                0               No error condition
                1               Format error - The name server was
                                unable to interpret the query.
                2               Server failure - The name server was
                                unable to process this query due to a
                                problem with the name server.
                3               Name Error - Meaningful only for
                                responses from an authoritative name
                                server, this code signifies that the
                                domain name referenced in the query does
                                not exist.
                4               Not Implemented - The name server does
                                not support the requested kind of query.
                5               Refused - The name server refuses to
                                perform the specified operation for
                                policy reasons.  For example, a name
                                server may not wish to provide the
                                information to the particular requester,
                                or a name server may not wish to perform
                                a particular operation (e.g., zone
                                transfer) for particular data.
                6-15            Reserved for future use.
QDCOUNT an unsigned 16 bit integer specifying the number of
                entries in the question section.
ANCOUNT an unsigned 16 bit integer specifying the number of
                resource records in the answer section.
NSCOUNT an unsigned 16 bit integer specifying the number of name
                server resource records in the authority records
                section.
ARCOUNT an unsigned 16 bit integer specifying the number of
                resource records in the additional records section.



A QUESTION
                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                                               |
    /                     QNAME                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     QTYPE                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     QCLASS                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

QNAME a domain name represented as a sequence of labels, where
                each label consists of a length octet followed by that
                number of octets.  The domain name terminates with the
                zero length octet for the null label of the root.  Note
                that this field may be an odd number of octets; no
                padding is used.
QTYPE a two octet code which specifies the type of the query.
                The values for this field include all codes valid for a
                TYPE field, together with some more general codes which
                can match more than one type of RR.
QCLASS a two octet code that specifies the class of the query.
                For example, the QCLASS field is IN for the Internet.



A RESOURCE RECORD
                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                                               |
    /                                               /
    /                      NAME                     /
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TYPE                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     CLASS                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TTL                      |
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                   RDLENGTH                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--|
    /                     RDATA                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
NAME a domain name to which this resource record pertains.
TYPE two octets containing one of the RR type codes. This
                field specifies the meaning of the data in the RDATA
                field.
CLASS two octets which specify the class of the data in the
                RDATA field.
TTL a 32 bit unsigned integer that specifies the time
                interval (in seconds) that the resource record may be
                cached before it should be discarded.  Zero values are
                interpreted to mean that the RR can only be used for the
                transaction in progress, and should not be cached.
RDLENGTH an unsigned 16 bit integer that specifies the length in
                octets of the RDATA field.
RDATA a variable length string of octets that describes the
                resource.  The format of this information varies
                according to the TYPE and CLASS of the resource record.
                For example, the if the TYPE is A and the CLASS is IN,
                the RDATA field is a 4 octet ARPA Internet address.


