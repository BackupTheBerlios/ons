dnl
dnl (COPYRIGHT) Copyright (C) 2008, 2009, The ONS Team.
dnl This file is part of ONS, see COPYING for details.
dnl

dnl
dnl File information:
dnl - Created: 22. December 2008
dnl - Lead-Dev: - David Herrmann
dnl - Contributors: /
dnl - Last-Change: 24. February 2009
dnl

dnl
dnl This autoconf file checks your system for all qualifications needed for
dnl all libraries which are part of ONS.
dnl Every library adds it's checks here and if one library does not run on
dnl one platform, all libraries will not run on this platform.
dnl
dnl The following list contains all checks which are guaranteed to be done
dnl by this configure script. Keep this list up-to-date!
dnl
dnl The following checks are not done and assumed to succeed:
dnl - Valid ISO-C89 standard library.
dnl - The system must be little or big endian (no hybrid modes).
dnl   - little endian is taken as default.
dnl - POSIX sed compatible program.
dnl - POSIX grep compatible program.
dnl - NULL has to be equal to binary 0x0 in every datatype.
dnl - __VA_ARGS__ must be supported.
dnl
dnl The following must be present, otherwise configure fails.
dnl - Valid ISO-C99 compiler. If only a C89 compiler is present
dnl   configure trys to compile in C89 mode.
dnl - POSIX install compatible program.
dnl - POSIX make compatible program.
dnl - C compiler halts on compilation errors.
dnl - C compiler supports indented macros.
dnl - One byte must be equal to eight bits.
dnl - netinet/in.h must be available.
dnl - sys/socket.h must be available.
dnl - => Defines always HAVE_NETINET_IN_H and HAVE_SYS_SOCKET_H.
dnl - Sets one of the following nonblocking options:
dnl   - NONBLOCK_POSIX: uses fcntl(O_NONBLOCK)
dnl   - NONBLOCK_BSD: uses fcntl(O_NDELAY)
dnl   - NONBLOCK_SYSV: uses ioctl(FIONBIO)
dnl
dnl The following checks check for system dependent issues and set various
dnl macros and variables.
dnl - Sets the macros which are required to enable system extensions.
dnl   The following macros are set if not already defined:
dnl   - _ALL_SOURCE for AIX 3, Interix and others.
dnl   - _GNU_SOURCE for GNU systems including linux.
dnl   - _POSIX_PTHREAD_SEMANTICS for Solaris threading extension.
dnl   - _TANDEM_SOURCE for HP-NonStop.
dnl   - __EXTENSIONS__ for Solaris extensions.
dnl   - _MINIX on Minix systems.
dnl   - _POSIX_1_SOURCE to enable POSIX.1 features.
dnl   - _POSIX_SOURCE to enable POSIX features.
dnl - Checks for endianness and:
dnl   - sets $ons_cv_endianness to "LittleEndian" or "BigEndian"
dnl   - defines LITTLE_ENDIAN on little endian machines
dnl   - defines BIG_ENDIAN on big endian machines
dnl   One of these two values are guaranteed to be set/defined.
dnl - Checks for mmap() and MAP_ANON(YMOUS):
dnl   - Defines HAVE_MMAP if mmap() is available in sys/mmap.h.
dnl   - Defines HAVE_DECL_MAP_ANONYMOUS if MAP_ANONYMOUS is declared.
dnl   - Defines HAVE_DECL_MAP_ANON if MAP_ANON is declared.
dnl - Checks for strnlen() and sets HAVE_STRNLEN if available.
dnl - Defines HAVE_UNISTD_H if unistd.h is available.
dnl - Defines HAVE_SYS_UN_H if sys/un.h is available.
dnl - Defines HAVE_UNIX_SOCKETS if "struct sockaddr_un" is available.
dnl   - If available, PATH_SIZE is defined to the size of the sun_path member.
dnl - Defines HAVE_SA_LEN, HAVE_SIN_LEN, HAVE_SIN6_LEN and HAVE_SUN_LEN if the
dnl   related sockaddr structure has a "*_len" member.
dnl - Checks whether at least one of "#pragma pack()" or __attribute__((__packed__))
dnl   is supported and defines HAVE_ATTR_PACK and/or HAVE_PRAGMA_PACK respectively.
dnl - Defines NO_IPV6 if IPv6 is not supported.
dnl - Defines HAVE_SYS_TYPES_H if sys/types.h is available.
dnl - Defines HAVE_EXT_SOCKET if socket() accepts binary options in the "type" argument.
dnl - Defines HAVE_ACCEPT4 if the accept4() syscall is available.
dnl - Defines HAVE_SYS_IOCTL_H if sys/ioctl.h is available.
dnl - Defines HAVE_FCNTL_H if sys/fcntl.h is available.
dnl - Defines HAVE_GETTIMEOFDAY if gettimeofday() is available. This includes the
dnl   sys/time.h header.
dnl - Defines HAVE_PTHREAD_H if pthread.h is available.
dnl - Defines DEBUG if debug mode is enabled.
dnl


dnl
dnl [[ INITIALIZE CORE PROGRAMS ]]
dnl
dnl Check for mandatory programs but checking for base programs like sed/grep
dnl is not done because every system using autoconf should have them.
dnl

AC_PREREQ(2.61)
AC_INIT([ONS], [0.1.0.0], [dh.herrmann@gmail.com])
AC_CONFIG_SRCDIR([ons/src/ons.c])
AC_PREFIX_DEFAULT([/usr])
AC_CONFIG_HEADER([ons/include/ons/config.h])

# These programs are crucial and autoconf should stop with an error if they are
# not available. However, some autoconf versions do not. We ignore this here.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PATH_PROGS(RMPROG, rm, /bin/rm)

# Define canonical host.
AC_CANONICAL_HOST


dnl
dnl [[ ENABLE SYSTEM EXTENSIONS ]]
dnl
dnl Set system dependent macros like _GNU_SOURCE or _ALL_SOURCE.
dnl

AC_USE_SYSTEM_EXTENSIONS


dnl
dnl [[ CALL C COMPILER CHECKS ]]
dnl
dnl Checks the C compiler on various vital issues.
dnl

ONS_C_C99
ONS_C_HALT_ON_ERROR
ONS_C_INDENTED_MACROS
ONS_C_EIGHT_BIT_SYSTEM
ONS_C_ENDIANNESS
ONS_C_NO_PADDING


dnl
dnl [[ PARMETER CHECKS ]]
dnl
dnl Checks whether --enable-warnings and --enable-debug are passed and
dnl enables related options.
dnl

AC_MSG_CHECKING([whether to enable compiler warnings])
AC_ARG_ENABLE([warnings],
    [  --enable-warnings       Enables compiler warnings.],
    [ons_cv_enable_warnings=$enable_warnings],
)
AC_MSG_RESULT([$ons_cv_enable_warnings])

AC_MSG_CHECKING([whether to enable debug])
AC_ARG_ENABLE([debug],
    [  --enable-debug          Enables debug mode.],
    [ons_cv_enable_debug=$enable_debug],
)
AC_MSG_RESULT([$ons_cv_enable_debug])

if test x"$ons_cv_enable_warnings" = xyes; then
    if test x"$ons_cv_enable_debug" = xyes; then
        CFLAGS="-fPIC -g -O0 -Wall"
    else
        CFLAGS="-fPIC -O2 -Wall -DNDEBUG"
        ons_cv_enable_debug="no"
        AC_DEFINE([DEBUG], [1], [Define if Debug mode is enabled.])
    fi
elif test x"$ons_cv_enable_debug" = xyes; then
    CFLAGS="-fPIC -g -O0"
    ons_cv_enable_warnings="no"
    AC_DEFINE([DEBUG], [1], [Define if Debug mode is enabled.])
else
    CFLAGS="$CFLAGS -fPIC -DNDEBUG"
    ons_cv_enable_debug="no"
    ons_cv_enable_warnings="no"
fi
LFLAGS="-shared -fPIC"


dnl
dnl [[ HEADER CHECKS ]]
dnl
dnl We check first for all required headers and abort if they are not available, then
dnl we check for optional headers and define constants if they are available.
dnl

AC_CHECK_HEADERS(netinet/in.h,, AC_MSG_ERROR([Required header 'netinet/in.h' not found.]))
AC_CHECK_HEADERS(sys/socket.h,, AC_MSG_ERROR([Required header 'sys/socket.h' not found.]))

AC_CHECK_HEADERS(unistd.h,,AC_MSG_WARN([Often required network header unistd.h is not available.]))
AC_CHECK_HEADERS(sys/un.h)
AC_CHECK_HEADERS(sys/types.h)
AC_CHECK_HEADERS(fcntl.h, [ons_cv_fcntl="yes"], [ons_cv_fcntl="no"])
AC_CHECK_HEADERS(sys/ioctl.h, [ons_cv_ioctl="yes"], [ons_cv_ioctl="no"])
AC_CHECK_HEADERS(pthread.h, [ons_cv_pthread="yes"], [ons_cv_pthread="no"])

ons_pthread=""
if test $ons_cv_pthread = "yes" ; then
    ons_pthread="-lpthread"
fi
AC_SUBST([ons_pthread])


dnl
dnl [[ UNIX SOCKETS ]]
dnl
dnl Checks whether Unix sockets are available on the system and if they are, it checks
dnl for the size of the filename member of struct sockaddr_un.
dnl If "struct sockaddr_un" is available, we assume that Unix sockets are available.
dnl

AC_CHECK_TYPE([struct sockaddr_un],
              [ons_cv_unix_sockets="yes"],
              [ons_cv_unix_sockets="no"],
              [#include <sys/un.h>, #include <sys/socket.h>])

if test $ons_cv_unix_sockets = yes ; then
    AC_CHECK_DECL([AF_UNIX],,
        AC_CHECK_DECL([AF_FILE],,
            AC_CHECK_DECL([AF_LOCAL],,ons_cv_unix_sockets="no", [#include <sys/socket.h>])
        , [#include <sys/socket.h>])
    , [#include <sys/socket.h>])
fi

if test $ons_cv_unix_sockets = yes ; then
    AC_MSG_CHECKING([for size of sockaddr_un.sun_path])
    AC_RUN_IFELSE([
                    AC_LANG_PROGRAM([[
                                    #include <stdlib.h>
                                    #ifdef HAVE_SYS_TYPES_H
                                        #include <sys/types.h>
                                    #endif
                                    #ifdef HAVE_SYS_SOCKET_H
                                        #include <sys/socket.h>
                                    #endif
                                    #ifdef HAVE_SYS_UN_H
                                        #include <sys/un.h>
                                    #endif
                                    ]],
                                    [[
                                    struct sockaddr_un test_addr;
                                    unsigned int test_int = sizeof(test_addr.sun_path);
                                    return 0;
                                    ]])
                  ],
                [ons_cv_unix_sockets="yes"],
                [ons_cv_unix_sockets="no"]
    )
    if test $ons_cv_unix_sockets = yes ; then
        AC_RUN_IFELSE([
                        AC_LANG_PROGRAM([[
                                        #include <stdlib.h>
                                        #ifdef HAVE_SYS_TYPES_H
                                            #include <sys/types.h>
                                        #endif
                                        #ifdef HAVE_SYS_SOCKET_H
                                            #include <sys/socket.h>
                                        #endif
                                        #ifdef HAVE_SYS_UN_H
                                            #include <sys/un.h>
                                        #endif
                                        ]],
                                        [[
                                        struct sockaddr_un test_addr;
                                        unsigned int test_int = sizeof(test_addr.sun_path);
                                        #ifdef UNIX_PATH_MAX
                                            return UNIX_PATH_MAX;
                                        #else
                                            return test_int;
                                        #endif
                                        ]])
                      ],
                      [ons_cv_unix_sockets="no"],
                      [ons_cv_sun_path=$?]
        )
    fi
    if test $ons_cv_unix_sockets = yes ; then
        AC_MSG_RESULT([$ons_cv_sun_path])
        AC_DEFINE_UNQUOTED([PATH_SIZE], [$ons_cv_sun_path], [Size of sockaddr_un.sun_path.])
        AC_DEFINE([HAVE_UNIX_SOCKETS], [1], [Define if 'struct sockaddr_un' exists.])
    else
        AC_MSG_RESULT([Could not determine the size. Disabling File Address support...])
    fi
fi


dnl
dnl [[ S*_LEN MEMBER ]]
dnl
dnl Checks for the *_len member in socket addresses.
dnl

AC_CHECK_MEMBER([struct sockaddr.sa_len],
                [AC_DEFINE([HAVE_SA_LEN],,[Define if struct sockaddr has sa_len field])],
                [],[#include <sys/types.h>
                    #include <sys/socket.h>])
AC_CHECK_MEMBER([struct sockaddr_in.sin_len],
                [AC_DEFINE([HAVE_SIN_LEN],,[Define if struct sockaddr_in has sin_len field])],
                [],[#include <sys/types.h>
                    #include <sys/socket.h>])
AC_CHECK_MEMBER([struct sockaddr_in6.sin6_len],
                [AC_DEFINE([HAVE_SIN6_LEN],,[Define if struct sockaddr_in6 has sin6_len field])],
                [],[#include <sys/types.h>
                    #include <sys/socket.h>])
AC_CHECK_MEMBER([struct sockaddr_un.sun_len],
                [AC_DEFINE([HAVE_SUN_LEN],,[Define if struct sockaddr_un has sun_len field])],
                [],[#include <sys/types.h>
                    #include <sys/socket.h>])


dnl
dnl [[ IPV6 SUPPORT ]]
dnl
dnl Check for IPv6 support.
dnl

AC_ARG_ENABLE(ipv6,
[  --disable-ipv6          Disables IPv6 support.],
[],[enableval=yes])
if test "z$enableval" = zno ; then
    AC_DEFINE([NO_IPV6])
    ons_cv_ipv6=no
else
    ons_cv_ipv6=no
    AC_CHECK_MEMBER([struct sockaddr_in6.sin6_addr],
                    [ons_cv_ipv6=yes],
                    [AC_DEFINE([NO_IPV6], [1], [Define if IPv6 is NOT supported.])],
                    [#include <netinet/in.h>])
fi


dnl
dnl [[ NONBLOCKING ]]
dnl
dnl Check whether we have posix, bsd or sysv nonblocking sockets.
dnl $ons_cv_type_signal is defined.
dnl

AC_CACHE_CHECK([for posix nonblocking], [ons_cv_nonblock_posix],
[
    AC_TRY_RUN([
        #include <sys/types.h>
        #include <sys/socket.h>
        #include <fcntl.h>
        #include <signal.h>
        void ons_sighandler(void) {
            exit(1);
        }
        int main(void) {
            char buffer[16];
            struct sockaddr addr;
            unsigned int size = sizeof(addr);
            signed int fd = socket(AF_INET, SOCK_DGRAM, 0);
            if(fd >= 0 && !(fcntl(fd, F_SETFL, O_NONBLOCK))) {
                signal(SIGALRM, ons_sighandler);
                alarm(2);
                recvfrom(fd, buffer, 16, 0, &addr, &size);
                alarm(0);
                exit(0);
            }
            exit(1);
        }
    ], [ons_cv_nonblock_posix="yes"], [ons_cv_nonblock_posix="no"])
])
if test $ons_cv_nonblock_posix = yes; then
    AC_DEFINE([NONBLOCK_POSIX], [1],[Define if you have POSIX nonblocking sockets.])
    ons_cv_nonblock="POSIX"
else
    AC_CACHE_CHECK([for bsd nonblocking], [ons_cv_nonblock_bsd],
    [
        AC_TRY_RUN([
            #include <sys/types.h>
            #include <sys/socket.h>
            #include <fcntl.h>
            #include <signal.h>
            void ons_sighandler(void) {
                exit(1);
            }
            int main(void) {
                char buffer[16];
                struct sockaddr addr;
                unsigned int size = sizeof(addr);
                signed int fd = socket(AF_INET, SOCK_DGRAM, 0);
                if(fd >= 0 && !(fcntl(fd, F_SETFL, O_NDELAY))) {
                    signal(SIGALRM, ons_sighandler);
                    alarm(2);
                    recvfrom(fd, buffer, 16, 0, &addr, &size);
                    alarm(0);
                    exit(0);
                }
                exit(1);
            }
        ], [ons_cv_nonblock_bsd="yes"], [ons_cv_nonblock_bsd="no"])
    ])
    if test $ons_cv_nonblock_bsd = yes; then
        AC_DEFINE([NONBLOCK_BSD], [1],[Define if you have BSD nonblocking sockets.])
        ons_cv_nonblock="BSD"
    else
        AC_CACHE_CHECK([for sysv nonblocking], [ons_cv_nonblock_sysv],
        [
            AC_TRY_RUN([
                #include <sys/types.h>
                #include <sys/socket.h>
                #include <sys/ioctl.h>
                #include <signal.h>
                void ons_sighandler(void) {
                    exit(1);
                }
                int main(void) {
                    char buffer[16];
                    struct sockaddr addr;
                    unsigned int size = sizeof(addr);
                    signed int fd = socket(AF_INET, SOCK_DGRAM, 0);
                    signed int res = 1;
                    if(fd >= 0 && (ioctl(fd, FIONBIO, &res) != -1)) {
                        signal(SIGALRM, ons_sighandler);
                        alarm(1);
                        recvfrom(fd, buffer, 16, 0, &addr, &size);
                        alarm(0);
                        exit(0);
                    }
                    exit(1);
                }
            ], [ons_cv_nonblock_sysv="yes"], [ons_cv_nonblock_sysv="no"])
        ])
        if test $ons_cv_nonblock_bsd = yes; then
            AC_DEFINE([NONBLOCK_SYSV], [1],[Define if you have SysV nonblocking sockets.])
            ons_cv_nonblock="SysV"
        else
            AC_MSG_ERROR([Your system does not support POSIX/BSD/SYSV nonblocking sockets.])
        fi
    fi
fi


dnl
dnl [[ SOCKET EXTENSIONS ]]
dnl
dnl Check for system dependent socket extensions.
dnl

ONS_CHECK_ACCEPT4
ONS_EXT_SOCKET


dnl
dnl [[ ANONYMOUS MMAP ]]
dnl
dnl Check for mmap() and the MAP_ANONYMOUS or MAP_ANON constants.
dnl

AC_CHECK_FUNCS([mmap], [ons_cv_map_anon="yes"], [ons_cv_map_anon="no"], [#include <sys/mman.h>])
if test x$ons_cv_map_anon = "xyes" ; then
    AC_CHECK_DECLS(MAP_ANONYMOUS, [ons_cv_map_anon="yes"], [ons_cv_map_anon="no"], [#include <sys/mman.h>])
    if test x$ons_cv_map_anon = "xno" ; then
        AC_CHECK_DECLS(MAP_ANON, [ons_cv_map_anon="yes"], [ons_cv_map_anon="no"], [#include <sys/mman.h>])
    else
        AC_CHECK_DECLS(MAP_ANON,,,[#include <sys/mman.h>])
    fi
fi


dnl
dnl [[ STRNLEN ]]
dnl
dnl Checks for strnlen() and sets HAVE_STRNLEN if available.
dnl

AC_CHECK_FUNCS([strnlen], [ons_cv_strnlen="yes"], [ons_cv_strnlen="no"], [#include <string.h>])


dnl
dnl [[ GETTIMEOFDAY ]]
dnl
dnl Checks for gettimeofday().
dnl

AC_CHECK_FUNCS([gettimeofday], [ons_cv_gettimeofday="yes"], [ons_cv_gettimeofday="no"], [#include <sys/time.h>])


dnl
dnl [[ MODULE COMPILATION ]]
dnl

ons_enable_memoria="no"
ons_enable_saw="no"
ons_enable_fip="no"
ons_enable_yaadns="no"
ons_modules="ons"
ons_makefiles="Makefile ons/Makefile"

AC_MSG_CHECKING(for module list)
AC_ARG_ENABLE(modules,
[  --enable-modules=list,of,modules   List of modules which should be compiled.],
[
    IFS_BACK="$IFS"
    IFS=','
    for module in $enableval ; do
        case "$module" in
            ons)
                dnl Do nothing.
                ;;
            memoria)
                if test $ons_enable_memoria = "no" ; then
                    ons_enable_memoria="yes"
                    ons_modules="$ons_modules memoria"
                    ons_makefiles="$ons_makefiles memoria/Makefile"
                fi
                ;;
            saw)
                if test $ons_enable_saw = "no" ; then
                    ons_enable_saw="yes"
                    ons_modules="$ons_modules saw"
                    ons_makefiles="$ons_makefiles saw/Makefile"
                fi
                ;;
            fip)
                if test $ons_enable_saw = "no" ; then
                    ons_enable_saw="yes"
                    ons_modules="$ons_modules saw"
                    ons_makefiles="$ons_makefiles saw/Makefile"
                fi
                if test $ons_enable_fip = "no" ; then
                    ons_enable_fip="yes"
                    ons_modules="$ons_modules fip"
                    ons_makefiles="$ons_makefiles fip/Makefile"
                fi
                ;;
            yaadns)
                if test $ons_enable_memoria = "no" ; then
                    ons_enable_memoria="yes"
                    ons_modules="$ons_modules memoria"
                    ons_makefiles="$ons_makefiles memoria/Makefile"
                fi
                if test $ons_enable_saw = "no" ; then
                    ons_enable_saw="yes"
                    ons_modules="$ons_modules saw"
                    ons_makefiles="$ons_makefiles saw/Makefile"
                fi
                if test $ons_enable_fip = "no" ; then
                    ons_enable_fip="yes"
                    ons_modules="$ons_modules fip"
                    ons_makefiles="$ons_makefiles fip/Makefile"
                fi
                if test $ons_enable_yaadns = "no" ; then
                    ons_enable_yaadns="yes"
                    ons_modules="$ons_modules yaadns"
                    ons_makefiles="$ons_makefiles yaadns/Makefile"
                fi
                ;;
            *)
                ;;
        esac
    done
    IFS="$IFS_BACK"
],
[
    ons_enable_memoria="yes"
    ons_enable_saw="yes"
    ons_enable_fip="yes"
    ons_enable_yaadns="yes"
    ons_modules="ons memoria saw fip yaadns"
    ons_makefiles="Makefile ons/Makefile memoria/Makefile saw/Makefile fip/Makefile yaadns/Makefile"
])
AC_MSG_RESULT($ons_modules)

if test "x$srvx_cv_modules" = "x" ; then
    srvx_cv_modules=" none"
fi

subdirs="$ons_modules"
AC_SUBST([subdirs])
AC_SUBST([CFLAGS])
AC_SUBST([LFLAGS])


dnl
dnl [[ GENERATE OUTPUT ]]
dnl
dnl Generate makefiles / config.h output.
dnl

AC_OUTPUT($ons_makefiles, [echo timestamp > stamp-h])


dnl
dnl [[ EXPORT USED MACROS ]]
dnl
dnl The library includes the header in it's distribution so we need to prefix all constants
dnl to not collide with other application's autotool's definitions.
dnl But some definitions are not allowed to be prefixed (eg., datatype macros).
dnl

if test -f ons/include/ons/config.h ; then
    ons_path="ons"
    AC_MSG_NOTICE([Creating setup.h out of config.h])

    # First grep everything we are interested in.
    TMP_NL="
"
    TMP_SYSEXT=$(grep -A 1 _ALL_SOURCE <$ons_path/include/ons/config.h)
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep -A 1 _GNU_SOURCE <$ons_path/include/ons/config.h)"
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep -A 1 _POSIX_PTHREAD_SEMANTICS <$ons_path/include/ons/config.h)"
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep -A 1 _TANDEM_SOURCE <$ons_path/include/ons/config.h)"
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep -A 1 __EXTENSIONS__ <$ons_path/include/ons/config.h)"
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep _MINIX <$ons_path/include/ons/config.h)"
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep _POSIX_1_SOURCE <$ons_path/include/ons/config.h)"
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep _POSIX_SOURCE <$ons_path/include/ons/config.h)"

    TMP_ENDIAN=$(grep BIG_ENDIAN <$ons_path/include/ons/config.h)
    TMP_ENDIAN="$TMP_ENDIAN$TMP_NL$(grep LITTLE_ENDIAN <$ons_path/include/ons/config.h)"
    TMP_ENDIAN=$(echo "$TMP_ENDIAN" | sed -e 's/^#define\s\{1,\}\(ONS_CONF_\)\{0,1\}\(.*\)$/#define ONS_CONF_\2/g')

    TMP_MMAP=$(grep HAVE_MMAP <$ons_path/include/ons/config.h)
    # both ANON and ANONYMOUS in this grep
    TMP_MMAP="$TMP_MMAP$TMP_NL$(grep HAVE_DECL_MAP_ANON <$ons_path/include/ons/config.h)"
    TMP_MMAP=$(echo "$TMP_MMAP" | sed -e 's/^#define\s\{1,\}\(ONS_CONF_\)\{0,1\}\(.*\)$/#define ONS_CONF_\2/g')

    TMP_MISC=$(grep HAVE_STRNLEN <$ons_path/include/ons/config.h)
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SYS_UN_H <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SYS_SOCKET_H <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_NETINET_IN_H <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_UNISTD_H <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_UNIX_SOCKETS <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep PATH_SIZE <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SA_LEN <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SIN_LEN <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SIN6_LEN <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SUN_LEN <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_ATTR_PACKED <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_PRAGMA_PACK <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep NO_IPV6 <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SYS_TYPES_H <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_EXT_SOCKET <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_ACCEPT4 <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SYS_IOCTL_H <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_FCNTL_H <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep NONBLOCK_POSIX <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep NONBLOCK_BSD <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep NONBLOCK_SYSV <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_GETTIMEOFDAY <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_PTHREAD_H <$ons_path/include/ons/config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep DEBUG <$ons_path/include/ons/config.h)"
    TMP_MISC=$(echo "$TMP_MISC" | sed -e 's/^#define\s\{1,\}\(ONS_CONF_\)\{0,1\}\(.*\)$/#define ONS_CONF_\2/g')

    # Write into setup.h
    echo "$TMP_NL$TMP_SYSEXT$TMP_NL$TMP_ENDIAN$TMP_NL$TMP_MMAP$TMP_NL$TMP_MISC$TMP_NL" >$ons_path/include/ons/setup.h
else
    AC_MSG_ERROR([Generated config.h not found!])
fi


dnl
dnl [[ CONFIGURATION REPORT ]]
dnl
dnl Eventually report configuration.
dnl

AC_MSG_RESULT([

ONS is now configured for your system.

    Host:                       $host
    Build:                      $build
    Operating system:           $host_os
    CFlags:                     $CFLAGS
    Prefix:                     $prefix
    Endianness:                 $ons_cv_endianness

    Modules:                    $ons_modules
    Compiler warnings:          $ons_cv_enable_warnings
    Debug mode:                 $ons_cv_enable_debug
    Anonymous mmap():           $ons_cv_map_anon
    Unix sockets:               $ons_cv_unix_sockets
    #pragma pack supported:     $ons_cv_pack_pragma
    __attr* pack supported:     $ons_cv_pack_attr
    IPv6 support:               $ons_cv_ipv6
    accept4() syscall:          $ons_cv_accept4
    Extended socket():          $ons_cv_ext_socket
    Nonblocking-socket:         $ons_cv_nonblock
    GetTimeOfDay():             $ons_cv_gettimeofday
    PThread support:            $ons_cv_pthread
])


dnl
dnl [[ WARNINGS ]]
dnl
dnl Warn on cross compilation.
dnl

if test $build != $host ; then
    AC_MSG_RESULT([
        You are cross-compiling ONS. Please check the configuration report for validity!
    ])
fi

