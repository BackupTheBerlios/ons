dnl
dnl (COPYRIGHT) Copyright (C) 2008, 2009, The ONS Team.
dnl This file is part of ONS, see COPYING for details.
dnl

dnl
dnl File information:
dnl - Created: 22. December 2008
dnl - Lead-Dev: - David Herrmann
dnl - Contributors: /
dnl - Last-Change: 15. March 2009
dnl

dnl
dnl This configure file checks all necessary configuration options on your
dnl system and creates the <ons/machine.h> header file for you.
dnl


dnl
dnl [[ INITIALIZE CORE PROGRAMS ]]
dnl
dnl Check for mandatory programs but checking for base programs like sed/grep
dnl is not done because every system using autoconf should have them.
dnl

AC_PREREQ(2.61)
AC_INIT([ONS], [0.1.1.0], [ons@xccd.eu])
AC_CONFIG_SRCDIR([../build.sh])
AC_PREFIX_DEFAULT([/usr])
AC_CONFIG_HEADER([config.h])
# These programs are crucial and autoconf should stop with an error if they are
# not available. However, some autoconf versions do not. We ignore this here.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PATH_PROGS(RMPROG, rm, /bin/rm)
# Define canonical host.
AC_CANONICAL_HOST


dnl
dnl [[ ENABLE SYSTEM EXTENSIONS ]]
dnl
dnl Sets the macros which are required to enable system extensions.
dnl The following macros are set if not already defined:
dnl   - _ALL_SOURCE for AIX 3, Interix and others.
dnl   - _GNU_SOURCE for GNU systems including linux.
dnl   - _POSIX_PTHREAD_SEMANTICS for Solaris threading extension.
dnl   - _TANDEM_SOURCE for HP-NonStop.
dnl   - __EXTENSIONS__ for Solaris extensions.
dnl   - _MINIX on Minix systems.
dnl   - _POSIX_1_SOURCE to enable POSIX.1 features.
dnl   - _POSIX_SOURCE to enable POSIX features.
dnl

AC_USE_SYSTEM_EXTENSIONS


dnl
dnl [[ CALL C COMPILER CHECKS ]]
dnl
dnl Checks the C compiler on various vital issues.
dnl

ONS_C_C99
ONS_C_HALT_ON_ERROR
ONS_C_INDENTED_MACROS
ONS_C_EIGHT_BIT_SYSTEM
ONS_C_NO_PADDING
ONS_C_ENDIANNESS


dnl
dnl [[ PARMETER CHECKS ]]
dnl
dnl Checks whether --enable-warnings and --enable-debug are passed and
dnl enables related options.
dnl

AC_MSG_CHECKING([whether to enable compiler warnings])
AC_ARG_ENABLE([warnings],
    [  --enable-warnings       Enables compiler warnings.],
    [ons_cv_enable_warnings=$enable_warnings],
)
AC_MSG_RESULT([$ons_cv_enable_warnings])

AC_MSG_CHECKING([whether to enable debug])
AC_ARG_ENABLE([debug],
    [  --enable-debug          Enables debug mode.],
    [ons_cv_enable_debug=$enable_debug],
)
AC_MSG_RESULT([$ons_cv_enable_debug])

if test x"$ons_cv_enable_warnings" = xyes; then
    if test x"$ons_cv_enable_debug" = xyes; then
        CFLAGS="-fPIC -g -O0 -Wall"
    else
        CFLAGS="-fPIC -O2 -Wall -DNDEBUG"
        ons_cv_enable_debug="no"
        AC_DEFINE([DEBUG], [1], [Define if Debug mode is enabled.])
    fi
elif test x"$ons_cv_enable_debug" = xyes; then
    CFLAGS="-fPIC -g -O0"
    ons_cv_enable_warnings="no"
    AC_DEFINE([DEBUG], [1], [Define if Debug mode is enabled.])
else
    CFLAGS="$CFLAGS -fPIC -DNDEBUG"
    ons_cv_enable_debug="no"
    ons_cv_enable_warnings="no"
fi
LFLAGS="-shared -fPIC"


dnl
dnl [[ HEADER CHECKS ]]
dnl
dnl We check first for all required headers and abort if they are not available, then
dnl we check for optional headers and define constants if they are available.
dnl

AC_CHECK_HEADERS(netinet/in.h,, AC_MSG_ERROR([Required header 'netinet/in.h' not found.]))
AC_CHECK_HEADERS(sys/socket.h,, AC_MSG_ERROR([Required header 'sys/socket.h' not found.]))

AC_CHECK_HEADERS(unistd.h,,AC_MSG_WARN([Often required network header unistd.h is not available.]))
AC_CHECK_HEADERS(sys/un.h)
AC_CHECK_HEADERS(sys/types.h)
AC_CHECK_HEADERS(fcntl.h, [ons_cv_fcntl="yes"], [ons_cv_fcntl="no"])
AC_CHECK_HEADERS(sys/ioctl.h, [ons_cv_ioctl="yes"], [ons_cv_ioctl="no"])
AC_CHECK_HEADERS(pthread.h, [ons_cv_pthread="yes"], [ons_cv_pthread="no"])

ons_pthread=""
if test $ons_cv_pthread = "yes" ; then
    ons_pthread="-lpthread"
fi
AC_SUBST([ons_pthread])


dnl
dnl [[ UNIX SOCKETS ]]
dnl
dnl Checks whether Unix sockets are available on the system and if they are, it checks
dnl for the size of the filename member of struct sockaddr_un.
dnl If "struct sockaddr_un" is available, we assume that Unix sockets are available.
dnl

AC_CHECK_TYPE([struct sockaddr_un],
              [ons_cv_unix_sockets="yes"],
              [ons_cv_unix_sockets="no"],
              [#include <sys/un.h>, #include <sys/socket.h>])

if test $ons_cv_unix_sockets = yes ; then
    AC_CHECK_DECL([AF_UNIX],,
        AC_CHECK_DECL([AF_FILE],,
            AC_CHECK_DECL([AF_LOCAL],,ons_cv_unix_sockets="no", [#include <sys/socket.h>])
        , [#include <sys/socket.h>])
    , [#include <sys/socket.h>])
fi

if test $ons_cv_unix_sockets = yes ; then
    AC_MSG_CHECKING([for size of sockaddr_un.sun_path])
    AC_RUN_IFELSE([
                    AC_LANG_PROGRAM([[
                                    #include <stdlib.h>
                                    #ifdef HAVE_SYS_TYPES_H
                                        #include <sys/types.h>
                                    #endif
                                    #ifdef HAVE_SYS_SOCKET_H
                                        #include <sys/socket.h>
                                    #endif
                                    #ifdef HAVE_SYS_UN_H
                                        #include <sys/un.h>
                                    #endif
                                    ]],
                                    [[
                                    struct sockaddr_un test_addr;
                                    unsigned int test_int = sizeof(test_addr.sun_path);
                                    return 0;
                                    ]])
                  ],
                [ons_cv_unix_sockets="yes"],
                [ons_cv_unix_sockets="no"]
    )
    if test $ons_cv_unix_sockets = yes ; then
        AC_RUN_IFELSE([
                        AC_LANG_PROGRAM([[
                                        #include <stdlib.h>
                                        #ifdef HAVE_SYS_TYPES_H
                                            #include <sys/types.h>
                                        #endif
                                        #ifdef HAVE_SYS_SOCKET_H
                                            #include <sys/socket.h>
                                        #endif
                                        #ifdef HAVE_SYS_UN_H
                                            #include <sys/un.h>
                                        #endif
                                        ]],
                                        [[
                                        struct sockaddr_un test_addr;
                                        unsigned int test_int = sizeof(test_addr.sun_path);
                                        #ifdef UNIX_PATH_MAX
                                            return UNIX_PATH_MAX;
                                        #else
                                            return test_int;
                                        #endif
                                        ]])
                      ],
                      [ons_cv_unix_sockets="no"],
                      [ons_cv_sun_path=$?]
        )
    fi
    if test $ons_cv_unix_sockets = yes ; then
        AC_MSG_RESULT([$ons_cv_sun_path])
        AC_DEFINE_UNQUOTED([PATH_SIZE], [$ons_cv_sun_path], [Size of sockaddr_un.sun_path.])
        AC_DEFINE([HAVE_UNIX_SOCKETS], [1], [Define if 'struct sockaddr_un' exists.])
    else
        AC_MSG_RESULT([Could not determine the size. Disabling File Address support...])
    fi
fi


dnl
dnl [[ S*_LEN MEMBER ]]
dnl
dnl Checks for the *_len member in socket addresses.
dnl

AC_CHECK_MEMBER([struct sockaddr.sa_len],
                [AC_DEFINE([HAVE_SA_LEN],,[Define if struct sockaddr has sa_len field])],
                [],[#include <sys/types.h>
                    #include <sys/socket.h>])
AC_CHECK_MEMBER([struct sockaddr_in.sin_len],
                [AC_DEFINE([HAVE_SIN_LEN],,[Define if struct sockaddr_in has sin_len field])],
                [],[#include <sys/types.h>
                    #include <sys/socket.h>])
AC_CHECK_MEMBER([struct sockaddr_in6.sin6_len],
                [AC_DEFINE([HAVE_SIN6_LEN],,[Define if struct sockaddr_in6 has sin6_len field])],
                [],[#include <sys/types.h>
                    #include <sys/socket.h>])
AC_CHECK_MEMBER([struct sockaddr_un.sun_len],
                [AC_DEFINE([HAVE_SUN_LEN],,[Define if struct sockaddr_un has sun_len field])],
                [],[#include <sys/types.h>
                    #include <sys/socket.h>])


dnl
dnl [[ IPV6 SUPPORT ]]
dnl
dnl Check for IPv6 support.
dnl

AC_ARG_ENABLE(ipv6,
[  --disable-ipv6          Disables IPv6 support.],
[],[enableval=yes])
if test "z$enableval" = zno ; then
    AC_DEFINE([NO_IPV6])
    ons_cv_ipv6=no
else
    ons_cv_ipv6=no
    AC_CHECK_MEMBER([struct sockaddr_in6.sin6_addr],
                    [ons_cv_ipv6=yes],
                    [AC_DEFINE([NO_IPV6], [1], [Define if IPv6 is NOT supported.])],
                    [#include <netinet/in.h>])
fi


dnl
dnl [[ NONBLOCKING ]]
dnl
dnl Check whether we have posix, bsd or sysv nonblocking sockets.
dnl $ons_cv_type_signal is defined.
dnl

AC_CACHE_CHECK([for posix nonblocking], [ons_cv_nonblock_posix],
[
    AC_TRY_RUN([
        #include <sys/types.h>
        #include <sys/socket.h>
        #include <fcntl.h>
        #include <signal.h>
        void ons_sighandler(void) {
            exit(1);
        }
        int main(void) {
            char buffer[16];
            struct sockaddr addr;
            unsigned int size = sizeof(addr);
            signed int fd = socket(AF_INET, SOCK_DGRAM, 0);
            if(fd >= 0 && !(fcntl(fd, F_SETFL, O_NONBLOCK))) {
                signal(SIGALRM, ons_sighandler);
                alarm(2);
                recvfrom(fd, buffer, 16, 0, &addr, &size);
                alarm(0);
                exit(0);
            }
            exit(1);
        }
    ], [ons_cv_nonblock_posix="yes"], [ons_cv_nonblock_posix="no"])
])
if test $ons_cv_nonblock_posix = yes; then
    AC_DEFINE([NONBLOCK_POSIX], [1],[Define if you have POSIX nonblocking sockets.])
    ons_cv_nonblock="POSIX"
else
    AC_CACHE_CHECK([for bsd nonblocking], [ons_cv_nonblock_bsd],
    [
        AC_TRY_RUN([
            #include <sys/types.h>
            #include <sys/socket.h>
            #include <fcntl.h>
            #include <signal.h>
            void ons_sighandler(void) {
                exit(1);
            }
            int main(void) {
                char buffer[16];
                struct sockaddr addr;
                unsigned int size = sizeof(addr);
                signed int fd = socket(AF_INET, SOCK_DGRAM, 0);
                if(fd >= 0 && !(fcntl(fd, F_SETFL, O_NDELAY))) {
                    signal(SIGALRM, ons_sighandler);
                    alarm(2);
                    recvfrom(fd, buffer, 16, 0, &addr, &size);
                    alarm(0);
                    exit(0);
                }
                exit(1);
            }
        ], [ons_cv_nonblock_bsd="yes"], [ons_cv_nonblock_bsd="no"])
    ])
    if test $ons_cv_nonblock_bsd = yes; then
        AC_DEFINE([NONBLOCK_BSD], [1],[Define if you have BSD nonblocking sockets.])
        ons_cv_nonblock="BSD"
    else
        AC_CACHE_CHECK([for sysv nonblocking], [ons_cv_nonblock_sysv],
        [
            AC_TRY_RUN([
                #include <sys/types.h>
                #include <sys/socket.h>
                #include <sys/ioctl.h>
                #include <signal.h>
                void ons_sighandler(void) {
                    exit(1);
                }
                int main(void) {
                    char buffer[16];
                    struct sockaddr addr;
                    unsigned int size = sizeof(addr);
                    signed int fd = socket(AF_INET, SOCK_DGRAM, 0);
                    signed int res = 1;
                    if(fd >= 0 && (ioctl(fd, FIONBIO, &res) != -1)) {
                        signal(SIGALRM, ons_sighandler);
                        alarm(1);
                        recvfrom(fd, buffer, 16, 0, &addr, &size);
                        alarm(0);
                        exit(0);
                    }
                    exit(1);
                }
            ], [ons_cv_nonblock_sysv="yes"], [ons_cv_nonblock_sysv="no"])
        ])
        if test $ons_cv_nonblock_bsd = yes; then
            AC_DEFINE([NONBLOCK_SYSV], [1],[Define if you have SysV nonblocking sockets.])
            ons_cv_nonblock="SysV"
        else
            AC_MSG_ERROR([Your system does not support POSIX/BSD/SYSV nonblocking sockets.])
        fi
    fi
fi


dnl
dnl [[ SOCKET EXTENSIONS ]]
dnl
dnl Check for system dependent socket extensions.
dnl

ONS_CHECK_ACCEPT4
ONS_EXT_SOCKET


dnl
dnl [[ ANONYMOUS MMAP ]]
dnl
dnl Check for mmap() and the MAP_ANONYMOUS or MAP_ANON constants.
dnl

AC_CHECK_FUNCS([mmap], [ons_cv_map_anon="yes"], [ons_cv_map_anon="no"], [#include <sys/mman.h>])
if test x$ons_cv_map_anon = "xyes" ; then
    AC_CHECK_DECLS(MAP_ANONYMOUS, [ons_cv_map_anon="yes"], [ons_cv_map_anon="no"], [#include <sys/mman.h>])
    if test x$ons_cv_map_anon = "xno" ; then
        AC_CHECK_DECLS(MAP_ANON, [ons_cv_map_anon="yes"], [ons_cv_map_anon="no"], [#include <sys/mman.h>])
    else
        AC_CHECK_DECLS(MAP_ANON,,,[#include <sys/mman.h>])
    fi
fi


dnl
dnl [[ STRNLEN ]]
dnl
dnl Checks for strnlen() and sets HAVE_STRNLEN if available.
dnl

AC_CHECK_FUNCS([strnlen], [ons_cv_strnlen="yes"], [ons_cv_strnlen="no"], [#include <string.h>])


dnl
dnl [[ GETTIMEOFDAY ]]
dnl
dnl Checks for gettimeofday().
dnl

AC_CHECK_FUNCS([gettimeofday], [ons_cv_gettimeofday="yes"], [ons_cv_gettimeofday="no"], [#include <sys/time.h>])


dnl
dnl [[ MODULE COMPILATION ]]
dnl

ons_enable_memoria="no"
ons_modules="ons"

AC_MSG_CHECKING(for module list)
AC_ARG_ENABLE(modules,
[  --enable-modules=list,of,modules   List of modules which should be compiled.],
[
    IFS_BACK="$IFS"
    IFS=','
    for module in $enableval ; do
        case "$module" in
            ons)
                dnl Do nothing.
                ;;
            memoria)
                if test $ons_enable_memoria = "no" ; then
                    ons_enable_memoria="yes"
                    ons_modules="$ons_modules memoria"
                fi
                ;;
            *)
                ;;
        esac
    done
    IFS="$IFS_BACK"
],
[
    ons_enable_memoria="yes"
    ons_modules="ons memoria"
])
AC_MSG_RESULT($ons_modules)

modules="$ons_modules"
AC_SUBST([modules])
AC_SUBST([CFLAGS])
AC_SUBST([LFLAGS])


dnl
dnl [[ GENERATE OUTPUT ]]
dnl
dnl Generate makefiles / config.h output.
dnl

AC_OUTPUT([Makefile.in], [echo timestamp > stamp-h])


dnl
dnl [[ EXPORT USED MACROS ]]
dnl
dnl The library includes the header in it's distribution so we need to prefix all constants
dnl to not collide with other application's autotool's definitions.
dnl But some definitions are not allowed to be prefixed (eg., datatype macros).
dnl

if test -f config.h ; then
    AC_MSG_NOTICE([Creating machine.h out of config.h])

    # Newline character.
    TMP_NL="
"
    # First grep everything we are interested in.
    TMP_SYSEXT=$(grep -A 1 _ALL_SOURCE <config.h)
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep -A 1 _GNU_SOURCE <config.h)"
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep -A 1 _POSIX_PTHREAD_SEMANTICS <config.h)"
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep -A 1 _TANDEM_SOURCE <config.h)"
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep -A 1 __EXTENSIONS__ <config.h)"
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep _MINIX <config.h)"
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep _POSIX_1_SOURCE <config.h)"
    TMP_SYSEXT="$TMP_SYSEXT$TMP_NL$(grep _POSIX_SOURCE <config.h)"

    TMP_ENDIAN=$(grep BIG_ENDIAN <config.h)
    TMP_ENDIAN="$TMP_ENDIAN$TMP_NL$(grep LITTLE_ENDIAN <config.h)"
    TMP_ENDIAN=$(echo "$TMP_ENDIAN" | sed -e 's/^#define\s\{1,\}\(ONS_CONF_\)\{0,1\}\(.*\)$/#define ONS_CONF_\2/g')

    TMP_MMAP=$(grep HAVE_MMAP <config.h)
    # both ANON and ANONYMOUS in this grep
    TMP_MMAP="$TMP_MMAP$TMP_NL$(grep HAVE_DECL_MAP_ANON <config.h)"
    TMP_MMAP=$(echo "$TMP_MMAP" | sed -e 's/^#define\s\{1,\}\(ONS_CONF_\)\{0,1\}\(.*\)$/#define ONS_CONF_\2/g')

    TMP_MISC=$(grep HAVE_STRNLEN <config.h)
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SYS_UN_H <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SYS_SOCKET_H <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_NETINET_IN_H <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_UNISTD_H <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_UNIX_SOCKETS <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep PATH_SIZE <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SA_LEN <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SIN_LEN <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SIN6_LEN <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SUN_LEN <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_ATTR_PACKED <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_PRAGMA_PACK <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep NO_IPV6 <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SYS_TYPES_H <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_EXT_SOCKET <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_ACCEPT4 <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_SYS_IOCTL_H <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_FCNTL_H <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep NONBLOCK_POSIX <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep NONBLOCK_BSD <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep NONBLOCK_SYSV <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_GETTIMEOFDAY <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep HAVE_PTHREAD_H <config.h)"
    TMP_MISC="$TMP_MISC$TMP_NL$(grep DEBUG <config.h)"
    TMP_MISC=$(echo "$TMP_MISC" | sed -e 's/^#define\s\{1,\}\(ONS_CONF_\)\{0,1\}\(.*\)$/#define ONS_CONF_\2/g')

    # Write into machine.h
    echo "$TMP_NL$TMP_SYSEXT$TMP_NL$TMP_ENDIAN$TMP_NL$TMP_MMAP$TMP_NL$TMP_MISC$TMP_NL" >../ons/include/ons/machine.h
else
    AC_MSG_ERROR([Generated config.h not found!])
fi


dnl
dnl [[ CONFIGURATION REPORT ]]
dnl
dnl Eventually report configuration.
dnl

AC_MSG_RESULT([

ONS is now configured for your system.

    Host:                       $host
    Build:                      $build
    Operating system:           $host_os
    Endianness:                 $ons_cv_endianness

    Prefix:                     $prefix
    CFlags:                     $CFLAGS
    C99 support:                $ac_cv_prog_cc_c99
    Compiler warnings:          $ons_cv_enable_warnings
    Debug mode:                 $ons_cv_enable_debug

    Modules:                    $ons_modules
    Anonymous mmap():           $ons_cv_map_anon
    Unix sockets:               $ons_cv_unix_sockets
    #pragma pack supported:     $ons_cv_pack_pragma
    __attr* pack supported:     $ons_cv_pack_attr
    IPv6 support:               $ons_cv_ipv6
    accept4() syscall:          $ons_cv_accept4
    Extended socket():          $ons_cv_ext_socket
    Nonblocking-socket:         $ons_cv_nonblock
    GetTimeOfDay():             $ons_cv_gettimeofday
    PThread support:            $ons_cv_pthread
])


dnl
dnl [[ WARNINGS ]]
dnl
dnl Warn on cross compilation.
dnl

if test $build != $host ; then
    AC_MSG_RESULT([
        You are cross-compiling ONS. Please check the configuration report for validity!
    ])
fi

